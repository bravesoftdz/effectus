mads 2.1.0 build 8 (23 Dec 19)
   388 					opt l+
   101
   102 				.print 'ZPAGE: ',fxptr,'..',zpend-1
   102 				ZPAGE: $0080..$00D7
   103
   104 				.print 'RTLIB: ',RTLIB,'..',*-1
   104 				RTLIB: $204B..$2106
   105
   106 				; ------------------------------------------------------------
   107
   108 2107			START
   109 2107 BA				tsx
   110 2108 8E 94 23			stx MAIN.@halt+1
   111
   112 					.ifdef fmulinit
   113 					fmulinit
   114 					eif
   115
   116 = 0117			VLEN	= VARDATASIZE-VARINITSIZE
   117 = 23AF			VADR	= DATAORIGIN+VARINITSIZE
   118
   119 					ift VADR > $BFFF
   120 					ert 'Invalid memory address range ',VADR
   121 					eli (VLEN>0) && (VLEN<=256)
   122 					ldx #256-VLEN
   123 					lda #0
   124 					sta:rne VADR+VLEN-256,x+
   125 					eli VLEN>0
   126 					@fill #VADR #VLEN #0
   126 				 MWA #VADR @FILL.PTR1\ MWA #VLEN @FILL.PTR3\ MVA #0 @FILL.PTR2\ JSR @FILL
   126 210B A9 AF 85 88 A9 23 +  MWA #VADR @FILL.PTR1
   126 2113 A9 17 85 8C A9 01 +  MWA #VLEN @FILL.PTR3
   126 211B A9 00 85 84		 MVA #0 @FILL.PTR2
   126 211F 20 6E 20		 JSR @FILL
   127 					eif
   128
   129 					.ifdef MAIN.@DEFINES.ROMOFF
   130 					icl 'atari\romoff.asm'
   131 					.endif
   132
   133 2122 A9 C6 85 82 A9 24 + 	mwa #PROGRAMSTACK psptr
   134
   135 212A A2 0F			ldx #$0f					; DOS II+/D ParamStr
   136 212C BD 40 03 9D 97 23 + 	mva:rpl $340,x MAIN.IOCB@COPY,x-
   137
   138 2135 E8				inx						; X = 0
   139 2136 86 90			stx bp						; BP = 0
   140
   141 2138 8E 08 D2			stx audctl					; reset POKEY
   142 213B A9 03			lda #3
   143 213D 8D 0F D2			sta skctl
   144
   145 2140 CA				dex						; X = 255
   146
   147 2141				UNITINITIALIZATION
Macro: UNITINITIALIZATION [Source: sayyo.a65]
Source: sayyo.a65
   148
   149 2141			.local	MAIN						; PROCEDURE
   150
   151 2141 4C 90 23			jmp l_0052
   152
   153 				; ------------------------------------------------------------
   154
   155 2144			.local	SYSTEM						; UNIT
   156
   157 2144			.local	RANDOM_0052					; FUNCTION | ASSEMBLER | OVERLOAD
   158
   159 				; ------------------------------------------------------------
   160
   161 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   162 				; as Pointer
   163 2144 B5 98 8D B4 23		mva :STACKORIGIN,x RANGE
   164 2149 CA				dex
   165
   166 				; ---------------------  ASM Block 006  ---------------------
   167
   168
   169 				;BYTE FUNC Rand(BYTE range)
   170 				; returns random number between 0 and
   171 				; range-1.  If range=0, then a random
   172 				; number between 0 and 255 is returned
   173
   174 214A AC 0A D2			ldy	$d20a		; RANDOM
   175
   176 214D AD B4 23			lda	range
   177 2150 F0 08			beq	stop
   178
   179 2152 85 8C			sta	ecx
   180 2154 84 84			sty	eax
   181
   182 2156 20 B6 20			jsr	imulCL
   183 2159 A8				tay
   184
   185 215A 8C B5 23		stop	sty	Result
   186
   187 215D			@exit
   188
   189 				; ------------------------------------------------------------
   190
   191 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
   192 				; as Pointer
   193
   194 215D E8				inx
   195 215E AD B5 23 95 98		mva RESULT :STACKORIGIN,x
   196
   197 					.ifdef @new
   198 					lda <@VarData
   199 					sta :ztmp
   200 					lda >@VarData
   201 					ldy #@VarDataSize-1
   202 					jmp @FreeMem
   203 					eif
   204
   205 				; ------------------------------------------------------------
   206
   207 = 23B4			RANGE	= DATAORIGIN+$000B
   208 = 23B5			RESULT	= DATAORIGIN+$000C
   209
   210 = 23B4			@VarData	= RANGE
   211 = 0002			@VarDataSize	= 2
   212
   213 2163 60				rts						; ret
   214 				.endl
   215
   216 2164			.local	POKE						; PROCEDURE | ASSEMBLER | REGISTER
   217
   218 				; ------------------------------------------------------------
   219
   220 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   221 				; as Pointer
   222 2164 B5 98 85 8C			mva :STACKORIGIN,x VALUE
   223 2168 CA				dex
   224
   225 				; ------------------------------------------------------------
   226
   227 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   228 				; as Pointer
   229 2169 B5 98 85 88			mva :STACKORIGIN,x A
   230 216D B5 A8 85 89			mva :STACKORIGIN+STACKWIDTH,x A+1
   231 2171 CA				dex
   232
   233 				; ---------------------  ASM Block 021  ---------------------
   234
   235 2172 A0 00			ldy #0
   236 2174 A5 8C 91 88			mva value (edx),y
   237
   238
   239 				; ------------------------------------------------------------
   240
   241 = 0088			A	= edx
   242 = 008C			VALUE	= ecx
   243 2178			@exit
   244 					.ifdef @new
   245 					lda <@VarData
   246 					sta :ztmp
   247 					lda >@VarData
   248 					ldy #@VarDataSize-1
   249 					jmp @FreeMem
   250 					eif
   251 2178 60				rts						; ret
   252 				.endl
   253
   254 				; ------------------------------------------------------------
   255
   256 = 0101			__PORTB_BANKS	= $0101
   257 = 0648			M_PI_2	= $0648
   258 = 0192			D_PI_2	= $0192
   259 = 0004			D_PI_180	= $04
   260 = 0000			MGTIA	= $00
   261 = 0080			MVBXE	= $80
   262 = 0000			VBXE_XDLADR	= $00
   263 = 0100			VBXE_BCBADR	= $0100
   264 = 1000			VBXE_MAPADR	= $1000
   265 = 5000			VBXE_OVRADR	= $5000
   266 = B000			VBXE_WINDOW	= $B000
   267 = 0000			IDLI	= $00
   268 = 0001			IVBL	= $01
   269 = 00FE			CH_DELCHR	= $FE
   270 = 009B			CH_ENTER	= $9B
   271 = 001B			CH_ESC	= $1B
   272 = 001C			CH_CURS_UP	= $1C
   273 = 001D			CH_CURS_DOWN	= $1D
   274 = 001E			CH_CURS_LEFT	= $1E
   275 = 001F			CH_CURS_RIGHT	= $1F
   276 = 007F			CH_TAB	= $7F
   277 = 009B			CH_EOL	= $9B
   278 = 007D			CH_CLR	= $7D
   279 = 00FD			CH_BELL	= $FD
   280 = 007E			CH_DEL	= $7E
   281 = 009C			CH_DELLINE	= $9C
   282 = 009D			CH_INSLINE	= $9D
   283 = 0000			COLOR_BLACK	= $00
   284 = 000E			COLOR_WHITE	= $0E
   285 = 0032			COLOR_RED	= $32
   286 = 0096			COLOR_CYAN	= $96
   287 = 0068			COLOR_VIOLET	= $68
   288 = 00C4			COLOR_GREEN	= $C4
   289 = 0074			COLOR_BLUE	= $74
   290 = 00EE			COLOR_YELLOW	= $EE
   291 = 0028			COLOR_ORANGE	= $28
   292 = 00E4			COLOR_BROWN	= $E4
   293 = 003C			COLOR_LIGHTRED	= $3C
   294 = 0004			COLOR_GRAY1	= $04
   295 = 0006			COLOR_GRAY2	= $06
   296 = 000A			COLOR_GRAY3	= $0A
   297 = 00CC			COLOR_LIGHTGREEN	= $CC
   298 = 007C			COLOR_LIGHTBLUE	= $7C
   299 = 0004			FMOPENREAD	= $04
   300 = 0008			FMOPENWRITE	= $08
   301 = 0009			FMOPENAPPEND	= $09
   302 = 000C			FMOPENREADWRITE	= $0C
   303 = 23A9			SCREENWIDTH	= DATAORIGIN+$0000
   304 = 23AB			SCREENHEIGHT	= DATAORIGIN+$0002
   305 = 23AD			DATESEPARATOR	= DATAORIGIN+$0004
   306 = D014			TVSYSTEM	= $D014
   307 = 02C0			adr.PALETTE	= $02C0
   308 2179			.var PALETTE	= adr.PALETTE .word
   309 = D012			adr.HPALETTE	= $D012
   310 2179			.var HPALETTE	= adr.HPALETTE .word
   311 = 23AE			FILEMODE	= DATAORIGIN+$0005
   312 = 23AF			GRAPHMODE	= DATAORIGIN+$0006
   313 = 23B0			IORESULT	= DATAORIGIN+$0007
   314 = 23B1			EOLN	= DATAORIGIN+$0008
   315 = 23B2			RNDSEED	= DATAORIGIN+$0009
   316
   317 = 2179 C0 02		PALETTE
   317 = 217B 12 D0		HPALETTE
   317 				.endl							; UNIT SYSTEM
   318
   319 				; ------------------------------------------------------------
   320
   321 217D			.local	ATARI						; UNIT
   322
   323 				; ------------------------------------------------------------
   324
   325 = 0012			RTCLOK	= $12
   326 = 004D			ATRACT	= $4D
   327 = 0052			LMARGIN	= $52
   328 = 0053			RMARGIN	= $53
   329 = 0054			ROWCRS	= $54
   330 = 0055			COLCRS	= $55
   331 = 0057			DINDEX	= $57
   332 = 0058			SAVMSC	= $58
   333 = 0062			PALNTS	= $62
   334 = 006A			RAMTOP	= $6A
   335 = 0200			VDSLST	= $0200
   336 = 0230			SDLSTL	= $0230
   337 = 0290			TXTROW	= $0290
   338 = 0291			TXTCOL	= $0291
   339 = 0293			TINDEX	= $0293
   340 = 0294			TXTMSC	= $0294
   341 = 022F			SDMCTL	= $022F
   342 = 026F			GPRIOR	= $026F
   343 = 02F0			CRSINH	= $02F0
   344 = 02F3			CHACT	= $02F3
   345 = 02F4			CHBAS	= $02F4
   346 = 02FC			CH	= $02FC
   347 = 02C0			PCOLR0	= $02C0
   348 = 02C1			PCOLR1	= $02C1
   349 = 02C2			PCOLR2	= $02C2
   350 = 02C3			PCOLR3	= $02C3
   351 = 02C4			COLOR0	= $02C4
   352 = 02C5			COLOR1	= $02C5
   353 = 02C6			COLOR2	= $02C6
   354 = 02C7			COLOR3	= $02C7
   355 = 02C8			COLOR4	= $02C8
   356 = 02C8			COLBAKS	= $02C8
   357 = D000			HPOSP0	= $D000
   358 = D001			HPOSP1	= $D001
   359 = D002			HPOSP2	= $D002
   360 = D003			HPOSP3	= $D003
   361 = D004			HPOSM0	= $D004
   362 = D005			HPOSM1	= $D005
   363 = D006			HPOSM2	= $D006
   364 = D007			HPOSM3	= $D007
   365 = D008			SIZEP0	= $D008
   366 = D009			SIZEP1	= $D009
   367 = D00A			SIZEP2	= $D00A
   368 = D00B			SIZEP3	= $D00B
   369 = D00C			SIZEM	= $D00C
   370 = D00D			GRAFP0	= $D00D
   371 = D00E			GRAFP1	= $D00E
   372 = D00F			GRAFP2	= $D00F
   373 = D010			GRAFP3	= $D010
   374 = D011			GRAFM	= $D011
   375 = D004			P0PF	= $D004
   376 = D014			PAL	= $D014
   377 = D012			COLPM0	= $D012
   378 = D013			COLPM1	= $D013
   379 = D014			COLPM2	= $D014
   380 = D015			COLPM3	= $D015
   381 = D016			COLPF0	= $D016
   382 = D017			COLPF1	= $D017
   383 = D018			COLPF2	= $D018
   384 = D019			COLPF3	= $D019
   385 = D01A			COLBK	= $D01A
   386 = D01B			PRIOR	= $D01B
   387 = D01D			GRACTL	= $D01D
   388 = D01E			HITCLR	= $D01E
   389 = D200			AUDF1	= $D200
   390 = D201			AUDC1	= $D201
   391 = D202			AUDF2	= $D202
   392 = D203			AUDC2	= $D203
   393 = D204			AUDF3	= $D204
   394 = D205			AUDC3	= $D205
   395 = D206			AUDF4	= $D206
   396 = D207			AUDC4	= $D207
   397 = D208			AUDCTL	= $D208
   398 = D20F			SKSTAT	= $D20F
   399 = D301			PORTB	= $D301
   400 = D400			DMACTL	= $D400
   401 = D401			CHACTL	= $D401
   402 = D402			DLISTL	= $D402
   403 = D404			HSCROL	= $D404
   404 = D405			VSCROL	= $D405
   405 = D407			PMBASE	= $D407
   406 = D409			CHBASE	= $D409
   407 = D40A			WSYNC	= $D40A
   408 = D40B			VCOUNT	= $D40B
   409 = D40C			PENH	= $D40C
   410 = D40D			PENV	= $D40D
   411 = D40E			NMIEN	= $D40E
   412
   413 				.endl							; UNIT ATARI
   414
   415 				; ------------------------------------------------------------
   416
   417 217D			.local	CRT						; UNIT
   418
   419 217D			.local	READKEY						; FUNCTION | ASSEMBLER
   420
   421 				; ---------------------  ASM Block 049  ---------------------
   422
   423 217D 8A 48			txa:pha
   424
   425 217F 20 4B 20			@GetKey
   426
   427 2182 8D B7 23			sta Result
   428
   429 2185 68 AA			pla:tax
   430
   431 2187			@exit
   432
   433 				; ------------------------------------------------------------
   434
   435 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
   436 				; as Pointer
   437
   438 2187 E8				inx
   439 2188 AD B7 23 95 98		mva RESULT :STACKORIGIN,x
   440
   441 					.ifdef @new
   442 					lda <@VarData
   443 					sta :ztmp
   444 					lda >@VarData
   445 					ldy #@VarDataSize-1
   446 					jmp @FreeMem
   447 					eif
   448
   449 				; ------------------------------------------------------------
   450
   451 = 23B7			RESULT	= DATAORIGIN+$000E
   452
   453 = 23B7			@VarData	= RESULT
   454 = 0001			@VarDataSize	= 1
   455
   456 218D 60				rts						; ret
   457 				.endl
   458
   459 218E			.local	DELAY						; PROCEDURE | ASSEMBLER
   460
   461 				; ------------------------------------------------------------
   462
   463 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   464 				; as Pointer
   465 218E B5 98 8D B8 23		mva :STACKORIGIN,x COUNT
   466 2193 B5 A8 8D B9 23		mva :STACKORIGIN+STACKWIDTH,x COUNT+1
   467 2198 CA				dex
   468
   469 				; ---------------------  ASM Block 052  ---------------------
   470
   471 2199 8A 48			txa:pha
   472
   473 219B A2 00			ldx #0
   474 219D A0 00			ldy #0
   475
   476 219F CC B8 23		loop	cpy count
   477 21A2 D0 05			bne @+
   478 21A4 EC B9 23			cpx count+1
   479 21A7 F0 46			beq stop
   480
   481 21A9 AD 0B D4 CD 0B D4 + @	:8 lda:cmp:req vcount
   482
   483 21E9 C8				iny
   484 21EA D0 01			sne
   485 21EC E8				inx
   486
   487 21ED D0 B0			bne loop
   488
   489 21EF 68 AA		stop	pla:tax
   490
   491
   492 				; ------------------------------------------------------------
   493
   494 = 23B8			COUNT	= DATAORIGIN+$000F
   495
   496 = 23B8			@VarData	= COUNT
   497 = 0002			@VarDataSize	= 2
   498
   499 21F1			@exit
   500 					.ifdef @new
   501 					lda <@VarData
   502 					sta :ztmp
   503 					lda >@VarData
   504 					ldy #@VarDataSize-1
   505 					jmp @FreeMem
   506 					eif
   507 21F1 60				rts						; ret
   508 				.endl
   509
   510 21F2			.local	KEYPRESSED					; FUNCTION | ASSEMBLER
   511
   512 				; ---------------------  ASM Block 053  ---------------------
   513
   514 21F2 A0 00			ldy #$00	; false
   515 21F4 AD FC 02			lda kbcodes
   516 21F7 C9 FF			cmp #$ff
   517 21F9 F0 01			beq skp
   518 21FB C8				iny		; true
   519
   520 				;	sty kbcodes
   521
   522 21FC 8C BA 23		skp	sty Result
   523
   524 21FF			@exit
   525
   526 				; ------------------------------------------------------------
   527
   528 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
   529 				; as Pointer
   530
   531 21FF E8				inx
   532 2200 AD BA 23 95 98		mva RESULT :STACKORIGIN,x
   533
   534 					.ifdef @new
   535 					lda <@VarData
   536 					sta :ztmp
   537 					lda >@VarData
   538 					ldy #@VarDataSize-1
   539 					jmp @FreeMem
   540 					eif
   541
   542 				; ------------------------------------------------------------
   543
   544 = 23BA			RESULT	= DATAORIGIN+$0011
   545
   546 = 23BA			@VarData	= RESULT
   547 = 0001			@VarDataSize	= 1
   548
   549 2205 60				rts						; ret
   550 				.endl
   551
   552 2206			.local	SOUND						; PROCEDURE | ASSEMBLER
   553
   554 				; ------------------------------------------------------------
   555
   556 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   557 				; as Pointer
   558 2206 B5 98 8D BE 23		mva :STACKORIGIN,x VOL
   559 220B CA				dex
   560
   561 				; ------------------------------------------------------------
   562
   563 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   564 				; as Pointer
   565 220C B5 98 8D BD 23		mva :STACKORIGIN,x DIST
   566 2211 CA				dex
   567
   568 				; ------------------------------------------------------------
   569
   570 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   571 				; as Pointer
   572 2212 B5 98 8D BC 23		mva :STACKORIGIN,x FREQ
   573 2217 CA				dex
   574
   575 				; ------------------------------------------------------------
   576
   577 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   578 				; as Pointer
   579 2218 B5 98 8D BB 23		mva :STACKORIGIN,x CHAN
   580 221D CA				dex
   581
   582 				; ---------------------  ASM Block 058  ---------------------
   583
   584 221E AD BB 23			lda Chan
   585 2221 29 07			and #7
   586
   587 2223 A0 10			ldy #$10
   588 2225 C9 04			cmp #4
   589 2227 B0 02			scs
   590 2229 A0 00			ldy #$00
   591 222B 8C 33 22			sty npokey
   592
   593 222E 29 03			and #3
   594
   595 2230 0A				asl @
   596 2231 18 69 00			add #0
   597 = 2233			npokey	equ *-1
   598 2234 A8				tay
   599
   600 2235 A9 00			lda #$00
   601 2237 8D 08 D2			sta audctl
   602 223A A9 03			lda #$03
   603 223C 8D 0F D2			sta skctl
   604
   605 223F AD BC 23			lda Freq
   606 2242 99 00 D2			sta audf1,y
   607
   608 2245 AD BE 23			lda Vol
   609 2248 29 0F			and #$0F
   610 224A 8D 55 22			sta _t
   611
   612 224D AD BD 23			lda Dist	; -> bit 7-6-5
   613 2250 0A 0A 0A 0A			:4 asl @
   614 2254 09 00			ora #0
   615 = 2255			_t	equ *-1
   616 2256 99 01 D2			sta audc1,y
   617
   618
   619 				; ------------------------------------------------------------
   620
   621 = 23BB			CHAN	= DATAORIGIN+$0012
   622 = 23BC			FREQ	= DATAORIGIN+$0013
   623 = 23BD			DIST	= DATAORIGIN+$0014
   624 = 23BE			VOL	= DATAORIGIN+$0015
   625
   626 = 23BB			@VarData	= CHAN
   627 = 0004			@VarDataSize	= 4
   628
   629 2259			@exit
   630 					.ifdef @new
   631 					lda <@VarData
   632 					sta :ztmp
   633 					lda >@VarData
   634 					ldy #@VarDataSize-1
   635 					jmp @FreeMem
   636 					eif
   637 2259 60				rts						; ret
   638 				.endl
   639
   640 				; ------------------------------------------------------------
   641
   642 = 23B6			TEXTATTR	= DATAORIGIN+$000D
   643 = D01F			CONSOL	= $D01F
   644 = 0000			CN_START_SELECT_OPTION	= $00
   645 = 0001			CN_SELECT_OPTION	= $01
   646 = 0002			CN_START_OPTION	= $02
   647 = 0003			CN_OPTION	= $03
   648 = 0004			CN_START_SELECT	= $04
   649 = 0005			CN_SELECT	= $05
   650 = 0006			CN_START	= $06
   651 = 0007			CN_NONE	= $07
   652 = 0000			BW40	= $00
   653 = 0001			CO40	= $01
   654 = 0002			BW80	= $02
   655 = 0003			CO80	= $03
   656 = 0007			MONO	= $07
   657 = 0001			C40	= $01
   658 = 0003			C80	= $03
   659 = 0000			BLACK	= $00
   660 = 0001			BLUE	= $01
   661 = 0002			GREEN	= $02
   662 = 0003			CYAN	= $03
   663 = 0004			RED	= $04
   664 = 0005			MAGENTA	= $05
   665 = 0006			BROWN	= $06
   666 = 0007			LIGHTGRAY	= $07
   667 = 0008			DARKGRAY	= $08
   668 = 0009			LIGHTBLUE	= $09
   669 = 000A			LIGHTGREEN	= $0A
   670 = 000B			LIGHTCYAN	= $0B
   671 = 000C			LIGHTRED	= $0C
   672 = 000D			LIGHTMAGENTA	= $0D
   673 = 000E			YELLOW	= $0E
   674 = 000F			WHITE	= $0F
   675 = 0080			BLINK	= $80
   676
   677 				.endl							; UNIT CRT
   678
   679 				; ------------------------------------------------------------
   680
   681 225A			.local	DOS						; UNIT
   682
   683 				; ------------------------------------------------------------
   684
   685 = D014			PALNTSC	= $D014
   686
   687 				.endl							; UNIT DOS
   688
   689 				; ------------------------------------------------------------
   690
   691 225A			.local	STRUTILS					; UNIT
   692
   693 				; ------------------------------------------------------------
   694
   695 				.endl							; UNIT STRUTILS
   696
   697 				; ------------------------------------------------------------
   698
   699 225A			.local	SYSUTILS					; UNIT
   700
   701 				; ------------------------------------------------------------
   702
   703 = 0001			FAREADONLY	= $01
   704 = 0002			FAHIDDEN	= $02
   705 = 0004			FASYSFILE	= $04
   706 = 0008			FAVOLUMEID	= $08
   707 = 0010			FADIRECTORY	= $10
   708 = 0020			FAARCHIVE	= $20
   709 = 003F			FAANYFILE	= $3F
   710
   711 				.endl							; UNIT SYSUTILS
   712
   713 				; ------------------------------------------------------------
   714
   715 225A			.local	CIO						; UNIT
   716
   717 225A			.local	GET						; FUNCTION | ASSEMBLER
   718
   719 				; ------------------------------------------------------------
   720
   721 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   722 				; as Pointer
   723 225A B5 98 8D BF 23		mva :STACKORIGIN,x CHN
   724 225F CA				dex
   725
   726 				; ---------------------  ASM Block 080  ---------------------
   727
   728 2260 8A 48			txa:pha
   729
   730 2262 AD BF 23			lda chn
   731 2265 0A 0A 0A 0A			:4 asl @
   732 2269 AA				tax
   733
   734 226A A9 07			lda #7		;get char command
   735 226C 9D 42 03			sta iccmd,x
   736
   737 226F A9 00			lda #$00	;zero out the unused
   738 2271 9D 48 03			sta icbufl,x	;store in accumulator
   739 2274 9D 49 03			sta icbufh,x	;...after CIOV jump
   740
   741 2277				m@call	ciov
Macro: M@CALL [Source: rtl6502.asm]
    12 2277 20 56 E4				jsr CIOV
Source: sayyo.a65
   742
   743 227A 8C B0 23			sty MAIN.SYSTEM.IOResult
   744
   745 227D 8D C0 23			sta Result
   746
   747 2280 68 AA			pla:tax
   748
   749 2282			@exit
   750
   751 				; ------------------------------------------------------------
   752
   753 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
   754 				; as Pointer
   755
   756 2282 E8				inx
   757 2283 AD C0 23 95 98		mva RESULT :STACKORIGIN,x
   758
   759 					.ifdef @new
   760 					lda <@VarData
   761 					sta :ztmp
   762 					lda >@VarData
   763 					ldy #@VarDataSize-1
   764 					jmp @FreeMem
   765 					eif
   766
   767 				; ------------------------------------------------------------
   768
   769 = 23BF			CHN	= DATAORIGIN+$0016
   770 = 23C0			RESULT	= DATAORIGIN+$0017
   771
   772 = 23BF			@VarData	= CHN
   773 = 0002			@VarDataSize	= 2
   774
   775 2288 60				rts						; ret
   776 				.endl
   777
   778 				; ------------------------------------------------------------
   779
   780 				.endl							; UNIT CIO
   781
   782 2289			.local	SAYYOPROC					; PROCEDURE
   783
   784 				; optimize FAIL ('SYSTEM.RANDOM_0052', examples\sayyo.pas), line = 23
   785 2289 E8				inx
   786 228A A9 FF 95 98			mva #$FF :STACKORIGIN,x
   787 228E 20 44 21			jsr SYSTEM.RANDOM_0052
   788 2291 B5 98 8D C2 24		mva :STACKORIGIN,x RND01
   789 2296 CA				dex
   790
   791 				; optimize FAIL ('SYSTEM.RANDOM_0052', examples\sayyo.pas), line = 24
   792 2297 E8				inx
   793 2298 A9 FF 95 98			mva #$FF :STACKORIGIN,x
   794 229C 20 44 21			jsr SYSTEM.RANDOM_0052
   795 229F B5 98 8D C3 24		mva :STACKORIGIN,x RND02
   796 22A4 CA				dex
   797
   798 				; optimize FAIL (100, examples\sayyo.pas), line = 25
   799 					@printSTRING #CODEORIGIN+$000D
   799 				 LDY> CODEORIGIN+$000D\ LDA< CODEORIGIN+$000D\ JSR @PRINTSTRING
   799 22A5 A0 20		 LDY> CODEORIGIN+$000D
   799 22A7 A9 0D		 LDA< CODEORIGIN+$000D
   799 22A9 20 D8 20		 JSR @PRINTSTRING
   800
   801 				; optimize OK (examples\sayyo.pas), line = 26
   802
   803 22AC AD C2 24			lda RND01
   804 22AF 8D C6 02			sta $02C6
   805
   806 				; optimize OK (examples\sayyo.pas), line = 27
   807
   808 22B2 AD C3 24			lda RND02
   809 22B5 8D C8 02			sta $02C8
   810
   811 				; ------------------------------------------------------------
   812
   813 = 24C2			RND01	= DATAORIGIN+$0119
   814 = 24C3			RND02	= DATAORIGIN+$011A
   815
   816 = 24C2			@VarData	= RND01
   817 = 0002			@VarDataSize	= 2
   818
   819 22B8			@exit
   820 					.ifdef @new
   821 					lda <@VarData
   822 					sta :ztmp
   823 					lda >@VarData
   824 					ldy #@VarDataSize-1
   825 					jmp @FreeMem
   826 					eif
   827 22B8 60				rts						; ret
   828 				.endl
   829
   830 22B9			.local	MAINPROC					; PROCEDURE
   831
   832 				; optimize FAIL (100, examples\sayyo.pas), line = 35
   833 					@printSTRING #CODEORIGIN+$0013
   833 				 LDY> CODEORIGIN+$0013\ LDA< CODEORIGIN+$0013\ JSR @PRINTSTRING
   833 22B9 A0 20		 LDY> CODEORIGIN+$0013
   833 22BB A9 13		 LDA< CODEORIGIN+$0013
   833 22BD 20 D8 20		 JSR @PRINTSTRING
   834 22C0 20 CA 20			@printEOL
   835
   836 				; ---------------------  ASM Block 085  ---------------------
   837
   838
   839 22C3 A9 00		  lda #0
   840 22C5 8D C6 02		  sta 710
   841 22C8 A9 2A		  lda #42
   842 22CA 8D C8 02		  sta 712
   843 				  
   844
   845 				; --- RepeatUntilProlog
   846 22CD			l_011E
   847
   848 				; optimize FAIL ('CRT.KEYPRESSED', examples\sayyo.pas), line = 42
   849 22CD 20 F2 21			jsr CRT.KEYPRESSED
   850 22D0 CA				dex
   851 22D1 B5 99			lda :STACKORIGIN+1,x
   852 22D3 F0 F8			jeq l_011E
   853 				; --- For
   854
   855 				; optimize OK (examples\sayyo.pas), line = 43
   856
   857 22D5 A9 00 8D C5 24		mva #$00 I
   858
   859 				; optimize OK (examples\sayyo.pas), line = 43
   860
   861 22DA			l_012C
   862 				; --- ForToDoCondition
   863
   864 				; optimize OK (examples\sayyo.pas), line = 43
   865
   866 22DA AD C5 24			lda I
   867 22DD C9 0F			cmp #$0F
   868 22DF B0 38			jcs l_013A
   869
   870 				; optimize FAIL ('SAYYOPROC', examples\sayyo.pas), line = 44
   871 22E1 20 89 22			jsr SAYYOPROC
   872
   873 				; optimize FAIL ('SYSTEM.RANDOM_0052', examples\sayyo.pas), line = 45
   874 22E4 E8				inx
   875 22E5 A9 03 95 98			mva #$03 :STACKORIGIN,x
   876 22E9 20 44 21			jsr SYSTEM.RANDOM_0052
   877 22EC E8				inx
   878 22ED A9 64 95 98			mva #$64 :STACKORIGIN,x
   879 22F1 E8				inx
   880 22F2 A9 0A 95 98			mva #$0A :STACKORIGIN,x
   881 22F6 20 44 21			jsr SYSTEM.RANDOM_0052
   882 22F9 B5 98			lda :STACKORIGIN,x
   883 22FB 18 69 08			add #$08
   884 22FE 95 98			sta :STACKORIGIN,x
   885 2300 E8				inx
   886 2301 A9 08 95 98			mva #$08 :STACKORIGIN,x
   887 2305 20 06 22			jsr CRT.SOUND
   888
   889 				; optimize FAIL ('CRT.DELAY', examples\sayyo.pas), line = 46
   890 2308 E8				inx
   891 2309 A9 78 95 98			mva #$78 :STACKORIGIN,x
   892 230D A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
   893 2311 20 8E 21			jsr CRT.DELAY
   894
   895 				; --- ForToDoEpilog
   896 2314 EE C5 24			inc I						; inc ptr byte [CounterAddress]
   897 2317 D0 C1			jne l_012C
   898 2319			l_013A
   899
   900 				; optimize OK (examples\sayyo.pas), line = 48
   901
   902 2319 A9 50			lda #$50
   903 231B 8D C6 02			sta $02C6
   904
   905 				; optimize OK (examples\sayyo.pas), line = 48
   906
   907 231E A9 86			lda #$86
   908 2320 8D C8 02			sta $02C8
   909
   910 				; optimize FAIL ('CRT.SOUND', examples\sayyo.pas), line = 49
   911 2323 E8				inx
   912 2324 A9 00 95 98			mva #$00 :STACKORIGIN,x
   913 2328 E8				inx
   914 2329 95 98			sta :STACKORIGIN,x
   915 232B E8				inx
   916 232C 95 98			sta :STACKORIGIN,x
   917 232E E8				inx
   918 232F A9 00 95 98			mva #$00 :STACKORIGIN,x
   919 2333 20 06 22			jsr CRT.SOUND
   920
   921 				; optimize FAIL ('CRT.SOUND', examples\sayyo.pas), line = 49
   922 2336 E8				inx
   923 2337 A9 01 95 98			mva #$01 :STACKORIGIN,x
   924 233B E8				inx
   925 233C A9 00 95 98			mva #$00 :STACKORIGIN,x
   926 2340 E8				inx
   927 2341 95 98			sta :STACKORIGIN,x
   928 2343 E8				inx
   929 2344 95 98			sta :STACKORIGIN,x
   930 2346 20 06 22			jsr CRT.SOUND
   931
   932 				; optimize FAIL ('CRT.SOUND', examples\sayyo.pas), line = 50
   933 2349 E8				inx
   934 234A A9 02 95 98			mva #$02 :STACKORIGIN,x
   935 234E E8				inx
   936 234F A9 00 95 98			mva #$00 :STACKORIGIN,x
   937 2353 E8				inx
   938 2354 95 98			sta :STACKORIGIN,x
   939 2356 E8				inx
   940 2357 95 98			sta :STACKORIGIN,x
   941 2359 20 06 22			jsr CRT.SOUND
   942
   943 				; optimize FAIL ('CRT.SOUND', examples\sayyo.pas), line = 50
   944 235C E8				inx
   945 235D A9 03 95 98			mva #$03 :STACKORIGIN,x
   946 2361 E8				inx
   947 2362 A9 00 95 98			mva #$00 :STACKORIGIN,x
   948 2366 E8				inx
   949 2367 95 98			sta :STACKORIGIN,x
   950 2369 E8				inx
   951 236A 95 98			sta :STACKORIGIN,x
   952 236C 20 06 22			jsr CRT.SOUND
   953
   954 				; optimize FAIL (100, examples\sayyo.pas), line = 51
   955 					@printSTRING #CODEORIGIN+$0031
   955 				 LDY> CODEORIGIN+$0031\ LDA< CODEORIGIN+$0031\ JSR @PRINTSTRING
   955 236F A0 20		 LDY> CODEORIGIN+$0031
   955 2371 A9 31		 LDA< CODEORIGIN+$0031
   955 2373 20 D8 20		 JSR @PRINTSTRING
   956 2376 20 CA 20			@printEOL
   957
   958 2379 20 7D 21			jsr CRT.READKEY					; call Entry
   959
   960 237C CA				dex
   961
   962 				; optimize FAIL ('CIO.GET', examples\sayyo.pas), line = 54
   963 237D E8				inx
   964 237E A9 07 95 98			mva #$07 :STACKORIGIN,x
   965 2382 20 5A 22			jsr CIO.GET
   966 2385 B5 98 8D C4 24		mva :STACKORIGIN,x CH
   967 238A CA				dex
   968
   969 238B 20 7D 21			jsr CRT.READKEY					; call Entry
   970
   971 238E CA				dex
   972
   973 				; ------------------------------------------------------------
   974
   975 = 24C4			CH	= DATAORIGIN+$011B
   976 = 24C5			I	= DATAORIGIN+$011C
   977 = 000E			@FORTMP_0129	= $0E
   978
   979 = 24C4			@VarData	= CH
   980 = 0002			@VarDataSize	= 2
   981
   982 238F			@exit
   983 					.ifdef @new
   984 					lda <@VarData
   985 					sta :ztmp
   986 					lda >@VarData
   987 					ldy #@VarDataSize-1
   988 					jmp @FreeMem
   989 					eif
   990 238F 60				rts						; ret
   991 				.endl
   992 2390			l_0052
   993
   994 				; optimize FAIL ('MAINPROC', examples\sayyo.pas), line = 59
   995 2390 20 B9 22			jsr MAINPROC
   996
   997 				; ------------------------------------------------------------
   998
   999 = 23C1			ISPASASM	= DATAORIGIN+$0018
  1000 = 23C2			adr.STRBUFFER	= DATAORIGIN+$0019
  1001 2393			.var STRBUFFER	= adr.STRBUFFER .word
  1002 2393			@exit
  1003
  1004 2393 A2 00		@halt	ldx #0
  1005 2395 9A				txs
  1006 					.ifdef MAIN.@DEFINES.ROMOFF
  1007 					inc portb
  1008 					.endif
  1009
  1010 2396 60				rts
  1011
  1012 				; ------------------------------------------------------------
  1013
  1014 2397 00 00 00 00 00 00 + IOCB@COPY	:16 brk
  1015
  1016 				; ------------------------------------------------------------
  1017
  1018 23A7			.local	@DEFINES
  1019 23A7			ATARI
  1020 				.endl
  1021
  1022 = 23A7 C2 23		STRBUFFER
  1022 				.endl							; MAIN
  1023
  1024 				; ------------------------------------------------------------
  1025 				; ------------------------------------------------------------
  1026
  1027 				.macro	UNITINITIALIZATION
  1028 				
  1029 					.ifdef MAIN.SYSTEM.@UnitInit
  1030 					jsr MAIN.SYSTEM.@UnitInit
  1031 					eif
  1032 				
  1033 					.ifdef MAIN.ATARI.@UnitInit
  1034 					jsr MAIN.ATARI.@UnitInit
  1035 					eif
  1036 				
  1037 					.ifdef MAIN.CRT.@UnitInit
  1038 					jsr MAIN.CRT.@UnitInit
  1039 					eif
  1040 				
  1041 					.ifdef MAIN.DOS.@UnitInit
  1042 					jsr MAIN.DOS.@UnitInit
  1043 					eif
  1044 				
  1045 					.ifdef MAIN.STRUTILS.@UnitInit
  1046 					jsr MAIN.STRUTILS.@UnitInit
  1047 					eif
  1048 				
  1049 					.ifdef MAIN.SYSUTILS.@UnitInit
  1050 					jsr MAIN.SYSUTILS.@UnitInit
  1051 					eif
  1052 				
  1053 					.ifdef MAIN.CIO.@UnitInit
  1054 					jsr MAIN.CIO.@UnitInit
  1055 					eif
  1056 				.endm
  1057
  1058 				; ------------------------------------------------------------
  1059
  1060 					ift .SIZEOF(MAIN.SYSTEM) > 0
  1061 					.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
  1061 				SYSTEM: $2144..$217C
  1062 					eif
  1063
  1064 					ift .SIZEOF(MAIN.ATARI) > 0
  1065 					.print 'ATARI: ',MAIN.ATARI,'..',MAIN.ATARI+.SIZEOF(MAIN.ATARI)-1
  1066 					eif
  1067
  1068 					ift .SIZEOF(MAIN.CRT) > 0
  1069 					.print 'CRT: ',MAIN.CRT,'..',MAIN.CRT+.SIZEOF(MAIN.CRT)-1
  1069 				CRT: $217D..$2259
  1070 					eif
  1071
  1072 					ift .SIZEOF(MAIN.DOS) > 0
  1073 					.print 'DOS: ',MAIN.DOS,'..',MAIN.DOS+.SIZEOF(MAIN.DOS)-1
  1074 					eif
  1075
  1076 					ift .SIZEOF(MAIN.STRUTILS) > 0
  1077 					.print 'STRUTILS: ',MAIN.STRUTILS,'..',MAIN.STRUTILS+.SIZEOF(MAIN.STRUTILS)-1
  1078 					eif
  1079
  1080 					ift .SIZEOF(MAIN.SYSUTILS) > 0
  1081 					.print 'SYSUTILS: ',MAIN.SYSUTILS,'..',MAIN.SYSUTILS+.SIZEOF(MAIN.SYSUTILS)-1
  1082 					eif
  1083
  1084 					ift .SIZEOF(MAIN.CIO) > 0
  1085 					.print 'CIO: ',MAIN.CIO,'..',MAIN.CIO+.SIZEOF(MAIN.CIO)-1
  1085 				CIO: $225A..$2288
  1086 					eif
  1087
  1088 					.print 'CODE: ',CODEORIGIN,'..',*-1
  1088 				CODE: $2000..$23A8
  1089
  1090 				; ------------------------------------------------------------
  1091
  1092 23A9			DATAORIGIN
  1093 23A9 28 00 18 00 2D 0C	.by  $28 $00 $18 $00 $2D $0C
  1094
  1095 = 0006			VARINITSIZE	= *-DATAORIGIN
  1096 = 011D			VARDATASIZE	= 285
  1097
  1098 = 24C6			PROGRAMSTACK	= DATAORIGIN+VARDATASIZE
  1099
  1100 					.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK
  1100 				DATA: $23A9..$24C6
  1101
  1102 02E0-02E1> 07 21			run START
  1103
  1104 				; ------------------------------------------------------------
  1105
  1106 				.macro	STATICDATA
  1107 				.by  $04 $54 $52 $55 $45 $00 $05 $46  $41 $4C $53 $45 $00 $04 $59 $4F  $21 $20 $00 $1C $50 $72 $65 $73
  1108 				.by  $73 $20 $61 $6E $79 $20 $6B $65  $79 $20 $66 $6F $72 $20 $67 $72  $65 $65 $74 $69 $6E $67 $73 $21
  1109 				.by  $00 $18 $9B $9B $50 $72 $65 $73  $73 $20 $61 $6E $79 $20 $6B $65  $79 $20 $74 $6F $20 $65 $78 $69
  1110 				.by  $74 $21 $00
  1111 				.endm
  1112
  1113 					end
